# local/private config goes in the include
[include]
  path = ~/.gitconfig-local

[includeIf "gitdir/i:~/code/private/"]
  path = ~/code/private/.gitconfig-private

[includeIf "gitdir/i:~/code/scratch/"]
  path = ~/code/private/.gitconfig-private

[includeIf "gitdir/i:~/code/work/"]
  path = ~/code/work/.gitconfig-work

[init]
  defaultBranch = main

# [http]
#   sslVerify = false

[protocol]
  version = 2

[remote "origin"]
  prune = true
  pruneTags = true

[gpg]
  # program = /opt/homebrew/bin/gpg
  format = ssh

[commit]
  gpgsign = true

[tag]
  forceSignAnnotated = true

[color]
  diff = auto
  status = auto
  branch = auto
  ui = auto

[color "branch"]
  current = cyan reverse
  local = yellow bold
  remote = green bold

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = green bold
  changed = yellow bold
  untracked = cyan bold

[core]
  autocrlf = input
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes
  editor = code --wait
  pager = ""

[apply]
  whitespace = nowarn

[diff]
  tool = Kaleidoscope

[difftool]
  prompt = false

[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[difftool "icdiff"]
  # https://github.com/jeffkaufman/icdiff
  cmd = icdiff -N -U 2 $LOCAL $REMOTE

[diff "zip"]
  textconv = unzip -c -a

[diff "pandoc"]
  textconv=pandoc --to=markdown
  prompt = false

[merge]
  tool = Kaleidoscope

[mergetool]
  keepBackup = false
  prompt = false

[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustExitCode = true

[help]
  autocorrect = 50

[fetch]
  prune = true
  pruneTags = true

[pull]
  rebase = true

[push]
  # See `git help config` (search for push.default)
  # for more information on different options of the below setting.
  #
  # Setting to git 2.0 default to surpress warning message
  default = simple
  autoSetupRemote = true
  # gpgsign = if-asked

[rebase]
  autoStash = true

[pretty]
  changelog = * %h %s
  # info = %C(auto)%h %G? %d %s
  info = %C(auto)%h %d %s
  json = {\"sha\":\"%H\",\"author\":{\"userid\":\"%aN\",\"email\":\"%aE\",\"date\":\"%as\"},\"commiter\":{\"userid\":\"%cN\",\"email\":\"%cE\",\"date\":\"%cs\"},\"message\":\"%s\",\"tree_sha\":\"%T\",\"parents\":\"%P\"}

[alias]
  # View abbreviated SHA, description, and history graph
  l = log --oneline --decorate --graph --abbrev-commit --all --date=relative -n 10
  lg = log --pretty=info --graph --all -n 10
  loj = !git log --pretty=json -n 10 | jq -sc
  lol = log --oneline --graph --decorate --all
  # View the current working tree status using the short format w/ branch info
  # upgrade your git if -sb breaks for you. it's fun.
  s = status -sb
  # Show verbose output about tags, branches or remotes
  # tags = tag -l
  tags = log --no-walk --tags --pretty=info --decorate=full
  tag = tag -s
  branches = branch -avv
  remotes = remote -v
  # http://haacked.com/archive/2014/07/28/github-flow-aliases/#completing-the-pull-request
  up = pull --rebase --prune
  co = checkout
  cob = switch -c
  ec = config --global -e
  # show who you are committing as
  # https://gist.github.com/loranallensmith/0350db8a91578f40e471d322cf244d45
  me = !git config --show-origin --get user.name && git config --show-origin --get user.email
  idiff = difftool -t icdiff
  # https://github.com/ahmadawais/Emoji-Log
  # https://gitmoji.dev/
  new = "!f() { git commit -S -m \"üéâ ${@:-Init}\"; }; f"
  gear = "!f() { git commit -S -m \"üîß ${@:-Update config}\"; }; f"
  # wip = "!f() { git commit -S -m \"üöß Work in Progress\"; }; f"
  wip = stash -u -m "WIP"
  fix = "!f() { git commit -S -m \"üêõ $@\"; }; f"
  rlz = "!f() { git commit -S -m \"üîñ $1\"; git tag \"$1\" -m \"$1\" -s; }; f"
  brk = "!f() { git commit -S -m \"üí• $@\"; }; f"
  doc = "!f() { git commit -S -m \"üìù $@\"; }; f"
  dep = "!f() { git commit -S -m \"‚¨ÜÔ∏è ${@:-Update dependencies}\"; }; f"
  tst = "!f() { git commit -S -m \"üß™ ${@:-Test}\" -m \"Mmm Mmm Mmm Mmm\"; }; f"
  typo = "!f() { git commit -S -m \"‚úèÔ∏è ${@:-Fix typo}\"; }; f"
  # worktrees
  wt = worktree
  wtl = worktree list
  wtr = worktree remove
  # add a worktree for a new local branch
  # git worktree add -b <branch> <path>
  wtb = "!f() { git worktree add -b ${1} ${2}; }; f"
  # add a worktree for an existing local branch
  # git worktree add --checkout <branch> <path>
  wtc = "!f() { git worktree add --checkout ${1} ${2}; }; f"
  # add a worktree for an existing upstream branch and set up tracking
  # git worktree add --track -b <branch> <path> <origin>/<branch>
  wtt = "!f() { git worktree add --track -b ${1} ${2} ${3}; }; f"
  # https://stackoverflow.com/a/25387310
  hide = update-index --assume-unchanged
  unhide = update-index --no-assume-unchanged
  # https://www.erikschierboom.com/2020/02/17/cleaning-up-local-git-branches-deleted-on-a-remote/#integrating-with-git
  g = ! "gh poi"
  gone = ! "gh poi"

[log]
  showSignature = false

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
